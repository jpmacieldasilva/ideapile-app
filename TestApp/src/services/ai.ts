import OpenAI from 'openai';
import { storage } from './storage';
import { Idea } from '../types';

// Configura√ß√µes padr√£o da IA
const AI_CONFIG = {
  model: 'gpt-3.5-turbo',
  maxTokens: 500,
  temperature: 0.7,
};

// Tipos para as respostas da IA
export interface AIExpansionResult {
  type: 'expand' | 'combine' | 'suggest' | 'inspire';
  content: string;
  relatedIdeas?: string[];
}

// Classe para gerenciar opera√ß√µes de IA
class AIService {
  private openai: OpenAI | null = null;

  // Inicializar cliente OpenAI
  private async initOpenAI(): Promise<void> {
    if (this.openai) return;

    try {
      const apiKey = await storage.getOpenAIKey();
      if (!apiKey) {
        throw new Error('Chave da OpenAI n√£o configurada. Configure nas configura√ß√µes.');
      }

      this.openai = new OpenAI({
        apiKey,
        dangerouslyAllowBrowser: true, // Necess√°rio para React Native
      });

      console.log('ü§ñ OpenAI client initialized');
    } catch (error) {
      console.error('‚ùå Error initializing OpenAI:', error);
      throw error;
    }
  }

  // Expandir uma ideia
  async expandIdea(idea: Idea): Promise<AIExpansionResult> {
    await this.initOpenAI();

    try {
      const prompt = `
Voc√™ √© um assistente criativo que ajuda a expandir ideias. 

Ideia original: "${idea.content}"
Tags relacionadas: ${idea.tags.join(', ')}

Expanda esta ideia de forma criativa e √∫til. Adicione detalhes, possibilidades, exemplos pr√°ticos e caminhos de implementa√ß√£o. Seja espec√≠fico e construtivo.

Responda apenas com a expans√£o da ideia, sem introdu√ß√µes ou explica√ß√µes sobre o que voc√™ est√° fazendo.
      `.trim();

      const response = await this.openai!.chat.completions.create({
        model: AI_CONFIG.model,
        messages: [{ role: 'user', content: prompt }],
        max_tokens: AI_CONFIG.maxTokens,
        temperature: AI_CONFIG.temperature,
      });

      const content = response.choices[0]?.message?.content?.trim();
      if (!content) {
        throw new Error('Resposta vazia da IA');
      }

      console.log('üß† Idea expanded successfully');
      return {
        type: 'expand',
        content,
      };
    } catch (error) {
      console.error('‚ùå Error expanding idea:', error);
      throw error;
    }
  }

  // Combinar m√∫ltiplas ideias
  async combineIdeas(ideas: Idea[]): Promise<AIExpansionResult> {
    await this.initOpenAI();

    if (ideas.length < 2) {
      throw new Error('Pelo menos 2 ideias s√£o necess√°rias para combinar');
    }

    try {
      const ideasText = ideas.map((idea, index) => 
        `${index + 1}. "${idea.content}" (Tags: ${idea.tags.join(', ')})`
      ).join('\n');

      const prompt = `
Voc√™ √© um assistente criativo que combina ideias diferentes em conceitos inovadores.

Ideias para combinar:
${ideasText}

Combine essas ideias de forma criativa e inovadora. Encontre conex√µes interessantes, sinergias e possibilidades que emergem quando essas ideias trabalham juntas. Crie uma nova perspectiva ou abordagem que aproveite o melhor de cada ideia.

Responda apenas com a combina√ß√£o criativa, sem introdu√ß√µes ou explica√ß√µes.
      `.trim();

      const response = await this.openai!.chat.completions.create({
        model: AI_CONFIG.model,
        messages: [{ role: 'user', content: prompt }],
        max_tokens: AI_CONFIG.maxTokens,
        temperature: AI_CONFIG.temperature,
      });

      const content = response.choices[0]?.message?.content?.trim();
      if (!content) {
        throw new Error('Resposta vazia da IA');
      }

      console.log('üîÑ Ideas combined successfully');
      return {
        type: 'combine',
        content,
        relatedIdeas: ideas.map(idea => idea.id),
      };
    } catch (error) {
      console.error('‚ùå Error combining ideas:', error);
      throw error;
    }
  }

  // Sugerir ideias relacionadas
  async suggestRelatedIdeas(idea: Idea): Promise<AIExpansionResult> {
    await this.initOpenAI();

    try {
      const prompt = `
Voc√™ √© um assistente criativo que sugere ideias relacionadas.

Ideia base: "${idea.content}"
Tags: ${idea.tags.join(', ')}

Sugira 3-5 ideias relacionadas que podem complementar, expandir ou conectar com esta ideia. As sugest√µes devem ser pr√°ticas, criativas e vi√°veis.

Formate sua resposta como uma lista numerada simples, apenas com as ideias sugeridas.
      `.trim();

      const response = await this.openai!.chat.completions.create({
        model: AI_CONFIG.model,
        messages: [{ role: 'user', content: prompt }],
        max_tokens: AI_CONFIG.maxTokens,
        temperature: AI_CONFIG.temperature,
      });

      const content = response.choices[0]?.message?.content?.trim();
      if (!content) {
        throw new Error('Resposta vazia da IA');
      }

      console.log('üí° Related ideas suggested successfully');
      return {
        type: 'suggest',
        content,
      };
    } catch (error) {
      console.error('‚ùå Error suggesting ideas:', error);
      throw error;
    }
  }

  // Inspirar com perspectivas diferentes
  async inspireIdea(idea: Idea): Promise<AIExpansionResult> {
    await this.initOpenAI();

    try {
      const prompt = `
Voc√™ √© um assistente criativo que oferece perspectivas inspiradoras e diferentes.

Ideia original: "${idea.content}"
Tags: ${idea.tags.join(', ')}

Ofere√ßa uma perspectiva completamente diferente sobre esta ideia. Pense fora da caixa, considere outras √°reas, outras culturas, outras √©pocas. Como algu√©m de uma √°rea completamente diferente abordaria isso? Que aspectos √∫nicos ou inesperados podem ser explorados?

Seja inspirador e inovador na sua resposta.
      `.trim();

      const response = await this.openai!.chat.completions.create({
        model: AI_CONFIG.model,
        messages: [{ role: 'user', content: prompt }],
        max_tokens: AI_CONFIG.maxTokens,
        temperature: 0.9, // Maior criatividade para inspira√ß√£o
      });

      const content = response.choices[0]?.message?.content?.trim();
      if (!content) {
        throw new Error('Resposta vazia da IA');
      }

      console.log('‚ú® Idea inspired successfully');
      return {
        type: 'inspire',
        content,
      };
    } catch (error) {
      console.error('‚ùå Error inspiring idea:', error);
      throw error;
    }
  }

  // Verificar se a API key est√° configurada
  async isConfigured(): Promise<boolean> {
    try {
      const apiKey = await storage.getOpenAIKey();
      return !!apiKey;
    } catch {
      return false;
    }
  }

  // Testar conex√£o com OpenAI
  async testConnection(): Promise<boolean> {
    try {
      await this.initOpenAI();
      
      const response = await this.openai!.chat.completions.create({
        model: AI_CONFIG.model,
        messages: [{ role: 'user', content: 'Responda apenas: "OK"' }],
        max_tokens: 10,
      });

      return response.choices[0]?.message?.content?.includes('OK') || false;
    } catch (error) {
      console.error('‚ùå Error testing OpenAI connection:', error);
      return false;
    }
  }
}

// Exportar inst√¢ncia singleton
export const aiService = new AIService();
export default aiService;
